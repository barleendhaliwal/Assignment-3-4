"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDeclaration = void 0;
/**
 * Takes a randomly nested property from a JSON-object
 * and returns its JSONType
 */
function getType(json) {
    if (json === null)
        return "null";
    var jsonType = typeof json;
    if (jsonType === "object") {
        if (Array.isArray(json))
            return "array";
        return "object";
    }
    switch (jsonType) {
        case "number":
        case "boolean":
        case "string":
            return jsonType;
        default:
            throw new Error("invalid JSON type " + jsonType);
    }
}
function isPrimitiveType(jsonType) {
    switch (jsonType) {
        case "boolean":
        case "null":
        case "number":
        case "string":
            return true;
        default:
            return false;
    }
}
/**
 * Takes a parsed JSON object and returns a matching type declaration
 */
function getDeclaration(json, options) {
    if (options === void 0) { options = {}; }
    var jsonType = getType(json);
    if (isPrimitiveType(jsonType)) {
        return jsonType;
    }
    if (jsonType === "object") {
        var obj_1 = json;
        var propertyDeclarations = Object.keys(obj_1).map(function (key) { return key + ":" + getDeclaration(obj_1[key], options) + ";"; });
        if (options.additionalProperties) {
            propertyDeclarations.push("[key:string]:" + options.additionalProperties + ";");
        }
        return "{" + propertyDeclarations.join("") + "}";
    }
    if (jsonType === "array") {
        var arr = json;
        var declarationMap = {};
        for (var _i = 0, arr_1 = arr; _i < arr_1.length; _i++) {
            var item = arr_1[_i];
            var declaration = getDeclaration(item, options);
            declarationMap[declaration] = true;
        }
        var itemDeclarations = Object.keys(declarationMap);
        if (options.additionalItems) {
            itemDeclarations.push(options.additionalItems);
        }
        if (itemDeclarations.length === 0)
            return "[]";
        if (itemDeclarations.length === 1)
            return itemDeclarations[0] + "[]";
        if (itemDeclarations.length)
            return "(" + itemDeclarations.join("|") + ")[]";
    }
    return "";
}
exports.getDeclaration = getDeclaration;
//# sourceMappingURL=main.js.map